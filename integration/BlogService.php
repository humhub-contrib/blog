<?php

namespace humhub\modules\blog\integration;

use Yii;
use humhub\modules\blog\helpers\Url;
use humhub\modules\content\components\ContentContainerController;
use humhub\modules\custom_pages\models\MarkdownType;
use humhub\modules\custom_pages\models\TemplateType;
use humhub\modules\content\components\ContentContainerActiveRecord;
use humhub\modules\custom_pages\models\CustomContentContainer;
use humhub\modules\custom_pages\interfaces\CustomPagesService;
use humhub\modules\custom_pages\interfaces\CustomPagesTargetEvent;
use humhub\modules\custom_pages\models\PageType;
use humhub\modules\custom_pages\models\Target;
use yii\base\Component;
use humhub\modules\blog\Module;
use humhub\modules\custom_pages\helpers\Url as CustomPagesUrl;

class BlogService extends Component
{
    public const DEFAULT_TARGET_ID = 'blog_main';

    /**
     * @var CustomPagesService
     */
    public $customPagesService;

    private static $_blogCount = [];

    /**
     * {@inheritdoc}
     */
    public function init()
    {
        $this->customPagesService = new CustomPagesService();
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * Registers custom page targets provided by the blog module.
     *
     * @param CustomPagesTargetEvent $event
     */
    public function registerTargets(CustomPagesTargetEvent $event)
    {
        // We do not support global pages for now
        if (!$event->container || $event->type !== PageType::Page) {
            return;
        }

        if ($event->container->moduleManager->isEnabled('blog')) {
            $target = new Target([
                'id' => static::DEFAULT_TARGET_ID,
                'icon' => Module::ICON,
                'accessRoute' => Url::ROUTE_INDEX,
                'contentTypes' => [MarkdownType::ID, TemplateType::ID],
                'contentName' => Yii::t('BlogModule.base', 'Blog'),
                'name' => Yii::t('BlogModule.base', 'Blogs'),
            ]);

            $target->setFieldSetting('icon', false);
            $target->setFieldSetting('sort_order', false);
            $target->setFieldSetting('in_new_window', false);

            $event->addTarget($target);
        }
    }

    /**
     * @param ContentContainerActiveRecord $container
     * @return int|mixed
     * @throws \yii\base\Exception
     */
    public function getBlogCount(ContentContainerActiveRecord $container)
    {
        if (!$this->isCustomPagesInstalled($container)) {
            return 0;
        }

        if (!isset(static::$_blogCount[$container->id]) !== null) {
            static::$_blogCount[$container->id] = $this->findBlogs($container)->count();
        }

        return static::$_blogCount[$container->id];
    }

    public function getLatestBlogs(ContentContainerActiveRecord $container)
    {
        if (!$this->isCustomPagesInstalled($container)) {
            return null;
        }

        return $this->customPagesService
            ->findContentByTarget(static::DEFAULT_TARGET_ID, PageType::Page, $container)
            ->orderBy('id DESC')
            ->one();
    }

    /**
     * Returns all single blog entry by id
     *
     * @param ContentContainerActiveRecord $container
     * @return CustomContentContainer
     * @throws \yii\base\Exception
     */
    public function getBlogById($id, ContentContainerActiveRecord $container)
    {
        if (!$this->isCustomPagesInstalled($container)) {
            return null;
        }

        return $this->customPagesService->getSingleContent($id, static::DEFAULT_TARGET_ID, PageType::Page, $container);
    }

    /**
     * @param $id
     * @param ContentContainerController $container
     * @return array|\yii\db\ActiveRecord|null
     * @throws \yii\base\Exception
     */
    public function getNextBlog($id, ContentContainerActiveRecord $container)
    {
        return $this->findBlogs($container, 'id DESC')->andWhere(['<', 'custom_pages_container_page.id', $id])->one();
    }

    public function getPrevBlog($id, ContentContainerActiveRecord $container)
    {
        return $this->findBlogs($container)->andWhere(['>', 'custom_pages_container_page.id', $id])->one();
    }

    /**
     * Returns all blog pages of a given container.
     *
     * @param ContentContainerActiveRecord $container
     * @return \yii\db\ActiveQuery
     * @throws \yii\base\Exception
     */
    public function findBlogs(ContentContainerActiveRecord $container, $orderBy = 'id ASC')
    {
        if (!$this->isCustomPagesInstalled($container)) {
            return null;
        }

        return $this->customPagesService
            ->findContentByTarget(static::DEFAULT_TARGET_ID, PageType::Page, $container)
            ->orderBy($orderBy);
    }

    /**
     * @param ContentContainerActiveRecord $container
     * @return bool
     */
    public function isCustomPagesInstalled(ContentContainerActiveRecord $container)
    {
        return $container->moduleManager->isEnabled('custom_pages');
    }

    /**
     * Returns the url used to create a new blog entry.
     * @param ContentContainerActiveRecord $container
     * @return string
     */
    public static function getCreateUrl(ContentContainerActiveRecord $container)
    {
        return CustomPagesUrl::toChooseContentType(static::DEFAULT_TARGET_ID, PageType::Page, $container);
    }

    /**
     * Deletes all blog posts of a given container
     *
     * @param ContentContainerActiveRecord $container
     * @throws \Throwable
     * @throws \yii\base\Exception
     * @throws \yii\db\StaleObjectException
     */
    public function deleteByContainer(ContentContainerActiveRecord $container)
    {
        $this->customPagesService->deleteByTarget(static::DEFAULT_TARGET_ID, PageType::Page, $container);
    }

    /**
     * Deletes all blog posts
     */
    public function deleteAll()
    {
        $this->customPagesService->deleteAllByTarget(static::DEFAULT_TARGET_ID);
    }


}
